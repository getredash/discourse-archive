<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Connection fails with &quot;Lost connection to MySQL server at &#39;reading authorization packet&#39;, system error: 11&quot;</title>
    <link>https://discuss.redash.io/t/connection-fails-with-lost-connection-to-mysql-server-at-reading-authorization-packet-system-error-11/11638</link>
    <description>### Issue Summary

I have set up Redash on an Ubuntu server via `getredash/setup` with no issues whatsoever. When I now try to add my PlanetScale hosted database as a data source, however, I get back the following error:

```
(2013, &quot;Lost connection to MySQL server at &#39;reading authorization packet&#39;, system error: 11&quot;)
```

This error is both being returned on the connection test that is part of the _&quot;New Data Source&quot;_ page and for when I try to run an actual query from the *&quot;New Query&quot;* page.

Worth mentioning is that the error gets returned nearly instantly. After browsing Redash&#39;s code it appears you have the connection timeout set to 60s so network related errors or latency can most likely be ruled out.

![CleanShot 2023-02-27 at 13.44.56|586x500](upload://vqV47jn3N8AG3cw1SBQqJkTJl1z.jpeg)

The logs have this stack trace:

```
scheduler_1         | [2023-02-27 13:38:01,319][PID:42][WARNING][ForkPoolWorker-26] task_name=redash.tasks.refresh_schema task_id=b4627530-d271-4539-80fc-b2e7eb492f51 Failed refreshing schema for the data source: PlanetScale
scheduler_1         | Traceback (most recent call last):
scheduler_1         |   File &quot;/app/redash/tasks/queries.py&quot;, line 261, in refresh_schema
scheduler_1         |     ds.get_schema(refresh=True)
scheduler_1         |   File &quot;/app/redash/models/__init__.py&quot;, line 155, in get_schema
scheduler_1         |     schema = sorted(query_runner.get_schema(get_stats=refresh), key=lambda t: t[&#39;name&#39;])
scheduler_1         |   File &quot;/app/redash/query_runner/__init__.py&quot;, line 142, in get_schema
scheduler_1         |     self._get_tables(schema_dict)
scheduler_1         |   File &quot;/app/redash/query_runner/mysql.py&quot;, line 137, in _get_tables
scheduler_1         |     results, error = self.run_query(query, None)
scheduler_1         |   File &quot;/app/redash/query_runner/mysql.py&quot;, line 164, in run_query
scheduler_1         |     connection = self._connection()
scheduler_1         |   File &quot;/app/redash/query_runner/mysql.py&quot;, line 124, in _connection
scheduler_1         |     connection = MySQLdb.connect(**params)
scheduler_1         |   File &quot;/usr/local/lib/python2.7/site-packages/MySQLdb/__init__.py&quot;, line 84, in Connect
scheduler_1         |     return Connection(*args, **kwargs)
scheduler_1         |   File &quot;/usr/local/lib/python2.7/site-packages/MySQLdb/connections.py&quot;, line 166, in __init__
scheduler_1         |     super(Connection, self).__init__(*args, **kwargs2)
scheduler_1         | OperationalError: (2013, &quot;Lost connection to MySQL server at &#39;reading authorization packet&#39;, system error: 11&quot;)
scheduler_1         | [2023-02-27 13:38:01,320][PID:42][INFO][ForkPoolWorker-26] task_name=redash.tasks.refresh_schema task_id=b4627530-d271-4539-80fc-b2e7eb492f51 task=refresh_schema state=failed ds_id=2 runtime=0.47
```

PlanetScale is using Vitess, a database clustering system for horizontal sharding of MySQL. There are some compatibility gaps between Vitess and MySQL, but I don&#39;t think any of them are a factor here. They have a [connection example for Python&#39;s MySQLdb](https://github.com/planetscale/connection-examples/blob/main/python/mysql.py) so it does not seem to be a broader incompatibility either.

PlanetScale also has a CLI utility available that can act as a proxy. If I start that proxy and point my redash installation to it, I can connect and issue queries to my PlanetScale database from within Redash without any issues.

Whether I use the MySQL or MySQL (Amazon RDS) data source does not make any difference.

![CleanShot 2023-02-27 at 14.41.39|586x500](upload://e9RnE05QxRvdj7BT4lTx44IGkyu.jpeg)

This leads me to believe that this may be a firewall issue as it&#39;s been discussed earlier in https://discuss.redash.io/t/redash-aws-mysql-connection/6336. My server&#39;s `iptables` rules are as follows and look good to me, though.

```
fooforge@prometheus:~/dev/github/setup/data$ sudo iptables -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination

Chain FORWARD (policy DROP)
target     prot opt source               destination
DOCKER-USER  all  --  anywhere             anywhere
DOCKER-ISOLATION-STAGE-1  all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED
DOCKER     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED
DOCKER     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED
DOCKER     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination

Chain DOCKER (3 references)
target     prot opt source               destination
ACCEPT     tcp  --  anywhere             172.18.0.7           tcp dpt:5000
ACCEPT     tcp  --  anywhere             172.18.0.8           tcp dpt:http

Chain DOCKER-ISOLATION-STAGE-1 (1 references)
target     prot opt source               destination
DOCKER-ISOLATION-STAGE-2  all  --  anywhere             anywhere
DOCKER-ISOLATION-STAGE-2  all  --  anywhere             anywhere
DOCKER-ISOLATION-STAGE-2  all  --  anywhere             anywhere
RETURN     all  --  anywhere             anywhere

Chain DOCKER-ISOLATION-STAGE-2 (3 references)
target     prot opt source               destination
DROP       all  --  anywhere             anywhere
DROP       all  --  anywhere             anywhere
DROP       all  --  anywhere             anywhere
RETURN     all  --  anywhere             anywhere

Chain DOCKER-USER (1 references)
target     prot opt source               destination
RETURN     all  --  anywhere             anywhere
```

Long story short, I&#39;m out of ideas. If anyone has any pointers for me, I would appreciate it. And, if not, thanks for reading!


**Disclaimer:** I&#39;m a senior support engineer at PlanetScale. This issue was reported by one of our users. I was able to reproduce it so I&#39;m hoping to get this resolved for them. :upside_down_face: 

### Technical details:

* Redash Version: 8.0.0+b32245(a16f551e)
* Browser/OS: n/a
* How did you install Redash: getredash/setup on a Ubuntu 22.04 server</description>
    
    <lastBuildDate>Mon, 27 Feb 2023 16:03:37 +0000</lastBuildDate>
    <category>Self Hosted Redash Support</category>
    <atom:link href="https://discuss.redash.io/t/connection-fails-with-lost-connection-to-mysql-server-at-reading-authorization-packet-system-error-11/11638.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Connection fails with &quot;Lost connection to MySQL server at &#39;reading authorization packet&#39;, system error: 11&quot;</title>
        <dc:creator><![CDATA[fooforge]]></dc:creator>
        <description><![CDATA[
            <h3>
<a name="issue-summary-1" class="anchor" href="https://discuss.redash.io#issue-summary-1"></a>Issue Summary</h3>
<p>I have set up Redash on an Ubuntu server via <code>getredash/setup</code> with no issues whatsoever. When I now try to add my PlanetScale hosted database as a data source, however, I get back the following error:</p>
<pre><code class="lang-auto">(2013, "Lost connection to MySQL server at 'reading authorization packet', system error: 11")
</code></pre>
<p>This error is both being returned on the connection test that is part of the <em>“New Data Source”</em> page and for when I try to run an actual query from the <em>“New Query”</em> page.</p>
<p>Worth mentioning is that the error gets returned nearly instantly. After browsing Redash’s code it appears you have the connection timeout set to 60s so network related errors or latency can most likely be ruled out.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://global.discourse-cdn.com/standard17/uploads/redash1/original/2X/d/dc4e6c93a9856507be9ce2eeec4a6e9184ce627d.jpeg" data-download-href="/uploads/short-url/vqV47jn3N8AG3cw1SBQqJkTJl1z.jpeg?dl=1" title="CleanShot 2023-02-27 at 13.44.56" rel="noopener nofollow ugc"><img src="https://global.discourse-cdn.com/standard17/uploads/redash1/optimized/2X/d/dc4e6c93a9856507be9ce2eeec4a6e9184ce627d_2_586x500.jpeg" alt="CleanShot 2023-02-27 at 13.44.56" data-base62-sha1="vqV47jn3N8AG3cw1SBQqJkTJl1z" width="586" height="500" srcset="https://global.discourse-cdn.com/standard17/uploads/redash1/optimized/2X/d/dc4e6c93a9856507be9ce2eeec4a6e9184ce627d_2_586x500.jpeg, https://global.discourse-cdn.com/standard17/uploads/redash1/optimized/2X/d/dc4e6c93a9856507be9ce2eeec4a6e9184ce627d_2_879x750.jpeg 1.5x, https://global.discourse-cdn.com/standard17/uploads/redash1/optimized/2X/d/dc4e6c93a9856507be9ce2eeec4a6e9184ce627d_2_1172x1000.jpeg 2x" data-dominant-color="F5DDCA"></a></div><p></p>
<p>The logs have this stack trace:</p>
<pre><code class="lang-auto">scheduler_1         | [2023-02-27 13:38:01,319][PID:42][WARNING][ForkPoolWorker-26] task_name=redash.tasks.refresh_schema task_id=b4627530-d271-4539-80fc-b2e7eb492f51 Failed refreshing schema for the data source: PlanetScale
scheduler_1         | Traceback (most recent call last):
scheduler_1         |   File "/app/redash/tasks/queries.py", line 261, in refresh_schema
scheduler_1         |     ds.get_schema(refresh=True)
scheduler_1         |   File "/app/redash/models/__init__.py", line 155, in get_schema
scheduler_1         |     schema = sorted(query_runner.get_schema(get_stats=refresh), key=lambda t: t['name'])
scheduler_1         |   File "/app/redash/query_runner/__init__.py", line 142, in get_schema
scheduler_1         |     self._get_tables(schema_dict)
scheduler_1         |   File "/app/redash/query_runner/mysql.py", line 137, in _get_tables
scheduler_1         |     results, error = self.run_query(query, None)
scheduler_1         |   File "/app/redash/query_runner/mysql.py", line 164, in run_query
scheduler_1         |     connection = self._connection()
scheduler_1         |   File "/app/redash/query_runner/mysql.py", line 124, in _connection
scheduler_1         |     connection = MySQLdb.connect(**params)
scheduler_1         |   File "/usr/local/lib/python2.7/site-packages/MySQLdb/__init__.py", line 84, in Connect
scheduler_1         |     return Connection(*args, **kwargs)
scheduler_1         |   File "/usr/local/lib/python2.7/site-packages/MySQLdb/connections.py", line 166, in __init__
scheduler_1         |     super(Connection, self).__init__(*args, **kwargs2)
scheduler_1         | OperationalError: (2013, "Lost connection to MySQL server at 'reading authorization packet', system error: 11")
scheduler_1         | [2023-02-27 13:38:01,320][PID:42][INFO][ForkPoolWorker-26] task_name=redash.tasks.refresh_schema task_id=b4627530-d271-4539-80fc-b2e7eb492f51 task=refresh_schema state=failed ds_id=2 runtime=0.47
</code></pre>
<p>PlanetScale is using Vitess, a database clustering system for horizontal sharding of MySQL. There are some compatibility gaps between Vitess and MySQL, but I don’t think any of them are a factor here. They have a <a href="https://github.com/planetscale/connection-examples/blob/main/python/mysql.py" rel="noopener nofollow ugc">connection example for Python’s MySQLdb</a> so it does not seem to be a broader incompatibility either.</p>
<p>PlanetScale also has a CLI utility available that can act as a proxy. If I start that proxy and point my redash installation to it, I can connect and issue queries to my PlanetScale database from within Redash without any issues.</p>
<p>Whether I use the MySQL or MySQL (Amazon RDS) data source does not make any difference.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://global.discourse-cdn.com/standard17/uploads/redash1/original/2X/6/633bcbb626250b63e7da447c51d5638ddc32d91a.jpeg" data-download-href="/uploads/short-url/e9RnE05QxRvdj7BT4lTx44IGkyu.jpeg?dl=1" title="CleanShot 2023-02-27 at 14.41.39" rel="noopener nofollow ugc"><img src="https://global.discourse-cdn.com/standard17/uploads/redash1/optimized/2X/6/633bcbb626250b63e7da447c51d5638ddc32d91a_2_586x500.jpeg" alt="CleanShot 2023-02-27 at 14.41.39" data-base62-sha1="e9RnE05QxRvdj7BT4lTx44IGkyu" width="586" height="500" srcset="https://global.discourse-cdn.com/standard17/uploads/redash1/optimized/2X/6/633bcbb626250b63e7da447c51d5638ddc32d91a_2_586x500.jpeg, https://global.discourse-cdn.com/standard17/uploads/redash1/optimized/2X/6/633bcbb626250b63e7da447c51d5638ddc32d91a_2_879x750.jpeg 1.5x, https://global.discourse-cdn.com/standard17/uploads/redash1/optimized/2X/6/633bcbb626250b63e7da447c51d5638ddc32d91a_2_1172x1000.jpeg 2x" data-dominant-color="F5DCC9"></a></div><p></p>
<p>This leads me to believe that this may be a firewall issue as it’s been discussed earlier in <a href="https://discuss.redash.io/t/redash-aws-mysql-connection/6336" class="inline-onebox">Redash AWS MySQL Connection</a>. My server’s <code>iptables</code> rules are as follows and look good to me, though.</p>
<pre><code class="lang-auto">fooforge@prometheus:~/dev/github/setup/data$ sudo iptables -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination

Chain FORWARD (policy DROP)
target     prot opt source               destination
DOCKER-USER  all  --  anywhere             anywhere
DOCKER-ISOLATION-STAGE-1  all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED
DOCKER     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED
DOCKER     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED
DOCKER     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination

Chain DOCKER (3 references)
target     prot opt source               destination
ACCEPT     tcp  --  anywhere             172.18.0.7           tcp dpt:5000
ACCEPT     tcp  --  anywhere             172.18.0.8           tcp dpt:http

Chain DOCKER-ISOLATION-STAGE-1 (1 references)
target     prot opt source               destination
DOCKER-ISOLATION-STAGE-2  all  --  anywhere             anywhere
DOCKER-ISOLATION-STAGE-2  all  --  anywhere             anywhere
DOCKER-ISOLATION-STAGE-2  all  --  anywhere             anywhere
RETURN     all  --  anywhere             anywhere

Chain DOCKER-ISOLATION-STAGE-2 (3 references)
target     prot opt source               destination
DROP       all  --  anywhere             anywhere
DROP       all  --  anywhere             anywhere
DROP       all  --  anywhere             anywhere
RETURN     all  --  anywhere             anywhere

Chain DOCKER-USER (1 references)
target     prot opt source               destination
RETURN     all  --  anywhere             anywhere
</code></pre>
<p>Long story short, I’m out of ideas. If anyone has any pointers for me, I would appreciate it. And, if not, thanks for reading!</p>
<p><strong>Disclaimer:</strong> I’m a senior support engineer at PlanetScale. This issue was reported by one of our users. I was able to reproduce it so I’m hoping to get this resolved for them. <img src="https://emoji.discourse-cdn.com/twitter/upside_down_face.png?v=12" title=":upside_down_face:" class="emoji" alt=":upside_down_face:" loading="lazy" width="20" height="20"></p>
<h3>
<a name="technical-details-2" class="anchor" href="https://discuss.redash.io#technical-details-2"></a>Technical details:</h3>
<ul>
<li>Redash Version: 8.0.0+b32245(a16f551e)</li>
<li>Browser/OS: n/a</li>
<li>How did you install Redash: getredash/setup on a Ubuntu 22.04 server</li>
</ul>
          <p><a href="https://discuss.redash.io/t/connection-fails-with-lost-connection-to-mysql-server-at-reading-authorization-packet-system-error-11/11638/1">Read full topic</a></p>
        ]]></description>
        <link>https://discuss.redash.io/t/connection-fails-with-lost-connection-to-mysql-server-at-reading-authorization-packet-system-error-11/11638/1</link>
        <pubDate>Mon, 27 Feb 2023 16:03:37 +0000</pubDate>
        <guid isPermaLink="false">discuss.redash.io-post-11638-1</guid>
        <source url="https://discuss.redash.io/t/connection-fails-with-lost-connection-to-mysql-server-at-reading-authorization-packet-system-error-11/11638.rss">Connection fails with &quot;Lost connection to MySQL server at &#39;reading authorization packet&#39;, system error: 11&quot;</source>
      </item>
  </channel>
</rss>
